import tkinter as tk
from tkinter import messagebox, simpledialog
from PIL import Image, ImageTk
import cx_Oracle
import os

# Database Connection Setup
dsn_tns = cx_Oracle.makedsn("localhost", 1521, service_name="xe")  # Adjust if necessary
conn = cx_Oracle.connect(user="GK", password="GKGKGK", dsn=dsn_tns)
cursor = conn.cursor()

# Ensure Users Table Exists
cursor.execute("""
    BEGIN
        EXECUTE IMMEDIATE 'CREATE TABLE users (
            id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
            acc_name VARCHAR2(100), 
            acc_number VARCHAR2(20) UNIQUE, 
            pin VARCHAR2(10), 
            balance NUMBER DEFAULT 0
        )';
    EXCEPTION WHEN OTHERS THEN
        IF SQLCODE != -955 THEN RAISE; END IF;
    END;
""")
conn.commit()

# Load Background Image
def set_background(frame):
    if os.path.exists("background.jpg"):
        bg_image = Image.open("background.jpg")
        bg_image = bg_image.resize((626, 352))
        bg_photo = ImageTk.PhotoImage(bg_image)
        bg_label = tk.Label(frame, image=bg_photo)
        bg_label.image = bg_photo
        bg_label.place(relwidth=1, relheight=1)

# User Authentication
def register():
    acc_name = entry_acc_name.get()
    acc_number = entry_account.get()
    pin = entry_pin.get()

    if acc_name and acc_number and pin:
        try:
            cursor.execute("INSERT INTO users (acc_name, acc_number, pin, balance) VALUES (:1, :2, :3, 0)", 
                           (acc_name, acc_number, pin))
            conn.commit()
            messagebox.showinfo("Success", "Registration Successful!")
            global current_user, current_acc_name
            current_user, current_acc_name = acc_number, acc_name
            banking_functions()
        except cx_Oracle.IntegrityError:
            messagebox.showerror("Error", "Account number already exists!")
    else:
        messagebox.showerror("Error", "Please enter all details")

def login():
    global current_user, current_acc_name
    acc_number = entry_account.get()
    pin = entry_pin.get()
    
    cursor.execute("SELECT acc_name FROM users WHERE acc_number=:1 AND pin=:2", (acc_number, pin))
    user = cursor.fetchone()

    if user:
        current_user, current_acc_name = acc_number, user[0]
        messagebox.showinfo("Success", "Login Successful!")
        banking_functions()
    else:
        messagebox.showerror("Error", "Invalid Credentials")

# Banking Functions
def check_balance():
    cursor.execute("SELECT balance FROM users WHERE acc_number=:1", (current_user,))
    balance = cursor.fetchone()[0]
    messagebox.showinfo("Balance", f"Your balance is ₹{balance:.2f}")

def deposit_money():
    amount = simpledialog.askfloat("Deposit", "Enter amount to deposit:")
    if amount and amount > 0:
        cursor.execute("UPDATE users SET balance = balance + :1 WHERE acc_number=:2", (amount, current_user))
        conn.commit()
        messagebox.showinfo("Success", f"₹{amount:.2f} deposited successfully!")

def withdraw_money():
    amount = simpledialog.askfloat("Withdraw", "Enter amount to withdraw:")
    if amount and amount > 0:
        cursor.execute("SELECT balance FROM users WHERE acc_number=:1", (current_user,))
        balance = cursor.fetchone()[0]

        if amount > balance:
            messagebox.showerror("Error", "Insufficient funds!")
        else:
            cursor.execute("UPDATE users SET balance = balance - :1 WHERE acc_number=:2", (amount, current_user))
            conn.commit()
            messagebox.showinfo("Success", f"₹{amount:.2f} withdrawn successfully!")

def logout():
    global current_user, current_acc_name
    current_user, current_acc_name = None, None
    show_home()

# GUI Setup
root = tk.Tk()
root.title("DBB Bank")
root.geometry("626x352")

def clear_window():
    for widget in root.winfo_children():
        widget.destroy()

def banking_functions():
    clear_window()
    global main_frame
    main_frame = tk.Frame(root)
    main_frame.pack(fill="both", expand=True)
    set_background(main_frame)

    container = tk.Frame(main_frame, bg="white")
    container.place(relx=0.5, rely=0.5, anchor="center")

    tk.Label(container, text=f"Welcome, {current_acc_name}!", font=("Arial", 16, "bold"), bg="white").pack(pady=5)
    tk.Label(container, text=f"Account No: {current_user}", font=("Arial", 12), bg="white").pack(pady=5)
    tk.Button(container, text="Check Balance", command=check_balance).pack(pady=5)
    tk.Button(container, text="Deposit Money", command=deposit_money).pack(pady=5)
    tk.Button(container, text="Withdraw Money", command=withdraw_money).pack(pady=5)
    tk.Button(container, text="Logout", command=logout).pack(pady=5)
    tk.Button(container, text="Home", command=show_home).pack(pady=5)

def show_home():
    clear_window()
    global home_frame
    home_frame = tk.Frame(root)
    home_frame.pack(fill="both", expand=True)
    set_background(home_frame)

    container = tk.Frame(home_frame, bg="white")
    container.place(relx=0.5, rely=0.5, anchor="center")

    tk.Label(container, text="DBB Bank", font=("Arial", 20, "bold"), bg="white").pack(pady=5)
    tk.Label(container, text="Welcome to DBB Bank", font=("Arial", 9), bg="white").pack(pady=5)
    tk.Button(container, text="Login", command=start_login).pack(pady=5)
    tk.Button(container, text="Create Account", command=start_register).pack(pady=5)

def start_login():
    clear_window()
    global login_frame, entry_account, entry_pin
    login_frame = tk.Frame(root)
    login_frame.pack(fill="both", expand=True)
    set_background(login_frame)

    container = tk.Frame(login_frame, bg="white")
    container.place(relx=0.5, rely=0.5, anchor="center")

    tk.Label(container, text="Account Number", bg="white").pack(pady=5)
    entry_account = tk.Entry(container)
    entry_account.pack(pady=5)

    tk.Label(container, text="PIN", bg="white").pack(pady=5)
    entry_pin = tk.Entry(container, show="*")
    entry_pin.pack(pady=5)

    tk.Button(container, text="Login", command=login).pack(pady=5)
    tk.Button(container, text="Home", command=show_home).pack(pady=5)

def start_register():
    clear_window()
    global register_frame, entry_acc_name, entry_account, entry_pin
    register_frame = tk.Frame(root)
    register_frame.pack(fill="both", expand=True)
    set_background(register_frame)

    container = tk.Frame(register_frame, bg="white")
    container.place(relx=0.5, rely=0.5, anchor="center")

    tk.Label(container, text="Account Name", bg="white").pack(pady=5)
    entry_acc_name = tk.Entry(container)
    entry_acc_name.pack(pady=5)

    tk.Label(container, text="Account Number", bg="white").pack(pady=5)
    entry_account = tk.Entry(container)
    entry_account.pack(pady=5)

    tk.Label(container, text="PIN", bg="white").pack(pady=5)
    entry_pin = tk.Entry(container, show="*")
    entry_pin.pack(pady=5)

    tk.Button(container, text="Register", command=register).pack(pady=5)
    tk.Button(container, text="Home", command=show_home).pack(pady=5)

show_home()
root.mainloop()
